---
- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes

- name: Check if networks exist
  command: docker network inspect {{ item }}
  register: network_check
  failed_when: network_check.rc != 0
  changed_when: false
  loop: 
    - traefik_proxy
    - pangolin_network

- name: Create external network
  docker_network:
    name: synapse_network
    driver: bridge
    state: present

- name: Create Matrix directory
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: "0755"
  loop:
    - "{{ matrix_data_dir }}"
    - "{{ matrix_db_backups }}"
    - "{{ matrix_backup_scripts }}"
    - "{{ postgres_data_dir }}"

- name: Generate Synapse configuration
  command: >
    docker run -it --rm
    --mount type=bind,src={{ matrix_data_dir }},dst=/data
    -e SYNAPSE_SERVER_NAME={{ matrix_domain }}
    -e SYNAPSE_REPORT_STATS=no
    matrixdotorg/synapse:latest generate
  args:
    creates: "{{ matrix_data_dir }}/homeserver.yaml"

- name: Update the permission after file generation.
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: "0755"
    recurse: true
  loop:
    - "{{ matrix_data_dir }}"

- name: Remove SQLite database configuration
  replace:
    path: "{{ matrix_data_dir }}/homeserver.yaml"
    regexp: '(^database:\n\s+name:\s+sqlite3\n(?:\s+.*\n?){2})'
    replace: '\n'


- name: Insert PostgreSQL configuration and other settings into homeserver.yaml
  blockinfile:
    path: "{{ matrix_data_dir }}/homeserver.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: "{{ lookup('template', 'templates/homeserver_additional_settings.j2') }}"
    state: present

- name: Deploy Matrix Postgres DB container
  docker_container:
    name: postgres_matrix
    image: postgres:latest
    env:
      POSTGRES_DB: "{{ matrix_db_name }}"
      POSTGRES_USER: "{{ matrix_db_user }}"
      POSTGRES_PASSWORD: "{{ matrix_db_password }}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - "{{ postgres_data_dir }}:/var/lib/postgresql/data"
    # ports:
      # - "5433:5432"
    labels:
      com.docker.compose.project: "matrix_stack"
      com.docker.compose.service: "postgres_matrix"
    networks:
      - name: traefik_proxy
      - name: synapse_network
    restart_policy: unless-stopped
    state: started

- name: Deploy Matrix Synapse container
  docker_container:
    name: synapse
    image: matrixdotorg/synapse:latest
    env:
      SYNAPSE_SERVER_NAME: "{{ matrix_domain }}"
      SYNAPSE_REPORT_STATS: "yes"
      SYNAPSE_CONFIG_PATH: "/data/homeserver.yaml"
      UID: "1000"
      GID: "1000"
    volumes:
      - "{{ matrix_data_dir }}:/data"
    labels:
      com.docker.compose.project: "matrix_stack"
      com.docker.compose.service: "synapse"
      traefik.enable: "true"
      traefik.http.routers.synapse-secure.entrypoints: "https"
      traefik.http.routers.synapse-secure.rule: "Host(`{{ matrix_domain }}`)"
      traefik.http.routers.synapse-secure.tls: "true"
      traefik.http.routers.synapse-secure.service: "synapse"
      traefik.http.services.synapse.loadbalancer.server.port: "8008"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "synapse"
      # tsdproxy.scheme: "http"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "8008"
    networks:
      - name: traefik_proxy
      - name: synapse_network
      - name: pangolin_network
    restart_policy: unless-stopped
    state: started


- name: Include common backup task to backup postgres db
  include_role:
    name: common
    tasks_from: db_backup_image
  vars:
    db_backups_sripts_folder: "{{ matrix_backup_scripts }}"
    container_name_running_postgresdb: "postgres_matrix"
    db_backup_retain_for_days: "7"
    db_to_backup_name: "{{ matrix_db_name }}"
    db_to_backup_user: "{{ matrix_db_user }}"
    db_to_backup_password: "{{ matrix_db_password }}"
    backup_schedule_cron: "0 2 30 * *"
    notification_message_subject: "Matrix DB backup"
    backup_container_name: "matrix_pgbackups"
    backup_container_stack_name: "matrix_stack"
    backup_folder_path: "{{ matrix_db_backups }}"
    backup_image: "ubuntu:25.10"
  when: matrix_backup_db | default(false)
  tags: matrix

- name: Wait for 10 seconds for DB backup to finish
  pause:
    seconds: 10
  when: matrix_backup_db | default(false) and matrix_restore_db | default(false)
  tags: linkwarden

- name: Restore PostgreSQL database from backup
  include_role:
    name: common
    tasks_from: postgresdb_restore
  vars:
    postgres_restore_base_path: "{{ matrix_backup_scripts }}"
    pg_backup_directory: "{{ matrix_db_backups }}/"
    pg_database: "{{ matrix_db_name }}"
    pg_host: "postgres_matrix"
    pg_port: 5432
    pg_user: "{{ matrix_db_user }}"
    pg_password: "{{ matrix_db_password }}"
    pg_drop_before_restore: true
  when: matrix_restore_db | default(false)
  tags: matrix

- name: Matrix deployed
  debug:
    msg: "Matrix is running successfully"


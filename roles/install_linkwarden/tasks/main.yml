---
- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes

- name: Check if networks exist
  command: docker network inspect {{ item }}
  register: network_check
  failed_when: network_check.rc != 0
  changed_when: false
  loop: 
    - traefik_proxy
    - pangolin_network

- name: Create external network
  docker_network:
    name: linkwarden_network
    driver: bridge
    state: present

- name: Create LinkWarden directory
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: "0755"
  loop:
    - "{{ base_storage_path }}"
    - "{{ linkwarden_data_dir }}"
    - "{{ postgres_data_dir }}"
    - "{{ linkwarden_db_backups }}"
    - "{{ linkwarden_db_backups_sripts }}"

- name: Deploy LinkWarden Postgres DB container
  docker_container:
    name: postgres_linkwarden
    image: postgres:15
    env:
      POSTGRES_DB: "{{ linkwarden_db_name }}"
      POSTGRES_USER: "{{ linkwarden_db_user }}"
      POSTGRES_PASSWORD: "{{ linkwarden_db_password }}"
    volumes:
      - "{{ postgres_data_dir }}:/var/lib/postgresql/data"
    labels:
      com.docker.compose.project: "linkwarden_stack"
      com.docker.compose.service: "postgres_linkwarden"
    networks:
      - name: traefik_proxy
      - name: linkwarden_network
    restart_policy: unless-stopped
    state: started

- name: Deploy LinkWarden container
  docker_container:
    name: linkwarden
    image: ghcr.io/linkwarden/linkwarden:latest
    env:
      NEXTAUTH_SECRET: "{{ nextauth_secret }}"
      NEXTAUTH_URL: "https://{{ linkwarden_domain }}/api/v1/auth"
      DATABASE_URL: "postgresql://{{ linkwarden_db_user }}:{{linkwarden_db_password}}@postgres_linkwarden:5432/{{ linkwarden_db_name }}"
    volumes:
      - "{{ linkwarden_data_dir }}:/data/data"
    labels:
      com.docker.compose.project: "linkwarden_stack"
      com.docker.compose.service: "linkwarden"
      traefik.docker.network: "traefik_proxy"
      traefik.enable: "true"
      traefik.http.routers.linkwarden-secure.entrypoints: "https"
      traefik.http.routers.linkwarden-secure.rule: "Host(`{{ linkwarden_domain }}`)"
      traefik.http.routers.linkwarden-secure.tls: "true"
      traefik.http.routers.linkwarden-secure.service: "linkwarden"
      traefik.http.services.linkwarden.loadbalancer.server.port: "3000"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "linkwarden"
      # tsdproxy.scheme: "http"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "8008"
    networks:
      - name: traefik_proxy
      - name: linkwarden_network
      - name: pangolin_network
    restart_policy: unless-stopped
    state: started

- name: Include common backup task to backup postgres db
  include_role:
    name: common
    tasks_from: db_backup_image
  vars:
    db_backups_sripts_folder: "{{ linkwarden_db_backups_sripts }}"
    container_name_running_postgresdb: "postgres_linkwarden"
    db_backup_retain_for_days: "7"
    db_to_backup_name: "{{ linkwarden_db_name }}"
    db_to_backup_user: "{{ linkwarden_db_user }}"
    db_to_backup_password: "{{ linkwarden_db_password }}"
    backup_schedule_cron: "15 2 * * *"
    notification_message_subject: "LinkWarden DB backup"
    backup_container_name: "linkwarden_pgbackups"
    backup_container_stack_name: "linkwarden_stack"
    backup_folder_path: "{{ linkwarden_db_backups }}"
    backup_image: "ubuntu:24.04"
  when: linkwarden_backup_db | default(false)
  tags: linkwarden

- name: Wait for 10 seconds for DB backup to finish
  pause:
    seconds: 10
  when: linkwarden_backup_db | default(false) and linkwarden_db_restore | default(false)
  tags: linkwarden

- name: Restore PostgreSQL database from backup
  include_role:
    name: common
    tasks_from: postgresdb_restore
  vars:
    postgres_restore_base_path: "{{ linkwarden_db_backups_sripts }}"
    pg_backup_directory: "{{ linkwarden_db_backups }}/"
    pg_database: "{{ linkwarden_db_name }}"
    pg_host: "postgres_linkwarden"
    pg_port: 5432
    pg_user: "{{ linkwarden_db_user }}"
    pg_password: "{{ linkwarden_db_password }}"
    pg_drop_before_restore: true
  when: linkwarden_db_restore | default(false)
  tags: linkwarden

- name: LinkWarden deployed
  debug:
    msg: "LinkWarden is running successfully"


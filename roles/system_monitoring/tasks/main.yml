---
- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: true

- name: Check if networks exist
  command: docker network inspect {{ item }}
  register: network_check
  failed_when: network_check.rc != 0
  changed_when: false
  loop: 
    - traefik_proxy
    - pangolin_network

- name: Create external network
  docker_network:
    name: monitoring_network
    driver: bridge
    state: present

- name: Create Monitoring directory
  file:
    path: "{{ item }}"
    state: directory
    owner: 65534
    group: 65534
    mode: "0755"
  loop:
    - "{{ monitoring_base_path }}"
    - "{{ prometheus_base }}"
    - "{{ prometheus_data }}"
    - "{{ prometheus_config }}"
    - "{{ grafana_data }}"

- name: Copy Prometheus config yaml file
  template:
    src: prometheus.yml.j2
    dest: "{{ prometheus_config }}/prometheus.yml"
    mode: '0644'

- name: Deploy Prometheus
  docker_container:
    name: prometheus
    image: docker.io/prom/prometheus:latest
    # ports:
      # - "9090:9090"
    command: "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - "{{ prometheus_config }}:/etc/prometheus"
      - "{{ prometheus_data }}:/prometheus"
    labels:
      com.docker.compose.project: "monitoring_stack"
      com.docker.compose.service: "prometheus"
      traefik.enable: "true"
      traefik.http.routers.prometheus-secure.entrypoints: "https"
      traefik.http.routers.prometheus-secure.rule: "Host(`{{ prometheus_domain }}`)"
      traefik.http.routers.prometheus-secure.tls: "true"
      traefik.http.routers.prometheus-secure.service: "prometheus"
      traefik.http.services.prometheus.loadbalancer.server.port: "9090"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "prometheus"
      # tsdproxy.scheme: "http"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "9090"
    networks:
      - name: traefik_proxy
      - name: monitoring_network
      - name: pangolin_network
    restart_policy: unless-stopped
    state: started

- name: Deploy Grafana
  docker_container:
    name: grafana
    image: docker.io/grafana/grafana-oss:11.6.0
    # ports:
      # - "3000:3000"
    volumes:
      - "grafana-data:/var/lib/grafana"
    labels:
      com.docker.compose.project: "monitoring_stack"
      com.docker.compose.service: "grafana"
      traefik.enable: "true"
      traefik.http.routers.grafana-secure.entrypoints: "https"
      traefik.http.routers.grafana-secure.rule: "Host(`{{ grafana_domain }}`)"
      traefik.http.routers.grafana-secure.tls: "true"
      traefik.http.routers.grafana-secure.service: "grafana"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "grafana"
      # tsdproxy.scheme: "http"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "3000"
    networks:
      - name: traefik_proxy
      - name: monitoring_network
    restart_policy: unless-stopped
    state: started


- name: Deploy cAdvisor
  docker_container:
    name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    # ports:
      # - "8080:8080"
    volumes:
      - "/:/rootfs:ro"
      - "/run:/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    devices:
      - "/dev/kmsg"
    privileged: true
    labels:
      com.docker.compose.project: "monitoring_stack"
      com.docker.compose.service: "cadvisor"
      traefik.enable: "true"
      traefik.http.routers.cadvisor-secure.entrypoints: "https"
      traefik.http.routers.cadvisor-secure.rule: "Host(`{{ cadvisor_domain }}`)"
      traefik.http.routers.cadvisor-secure.tls: "true"
      traefik.http.services.cadvisor.loadbalancer.server.port: "8080"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "cadvisor"
      # tsdproxy.scheme: "https"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "8080"
    networks:
      - name: traefik_proxy
      - name: monitoring_network
    restart_policy: unless-stopped
    state: started

- name: Deploy Node Exporter
  docker_container:
    name: nodeexporter
    image: quay.io/prometheus/node-exporter:latest
    command: "--path.rootfs=/host"
    pid_mode: host
    volumes:
      - "/:/host:ro,rslave"
    labels:
      com.docker.compose.project: "monitoring_stack"
      com.docker.compose.service: "nodeexporter"
      traefik.enable: "true"
      traefik.http.routers.nodeexporter-secure.entrypoints: "https"
      traefik.http.routers.nodeexporter-secure.rule: "Host(`{{ nodeexporter_domain }}`)"
      traefik.http.routers.nodeexporter-secure.tls: "true"
      traefik.http.routers.nodeexporter-secure.service: "nodeexporter"
      traefik.http.services.nodeexporter.loadbalancer.server.port: "9100"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "nodeexporter"
      # tsdproxy.scheme: "http"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "8008"
    networks:
      - name: traefik_proxy
      - name: monitoring_network
    restart_policy: unless-stopped
    state: started

- name: Deploy grafana-matrix-forwarder container
  docker_container:
    name: grafana-matrix-forwarder
    image: registry.gitlab.com/hctrdev/grafana-matrix-forwarder:latest
    published_ports:
      - "{{ grafana_matrix_forwarder_port }}:5000"
    env:
      GMF_MATRIX_USER: "{{ grafana_matrix_user }}"
      GMF_MATRIX_PASSWORD: "{{ grafana_matrix_password }}"
      GMF_MATRIX_HOMESERVER: "{{ grafana_matrix_homeserver }}"
      GMF_MATRIX_ROOM: "{{ grafana_matrix_room }}"
    labels:
      com.docker.compose.project: "monitoring_stack"
      com.docker.compose.service: "grafana-matrix-forwarder"
    networks:
      - name: monitoring_network
    restart_policy: unless-stopped
    state: started

- name: System monitoring packages deployed
  debug:
    msg: "System monitoring packages are running successfully"
---
- name: Find files in backup directory
  find:
    paths: "{{ pg_backup_directory }}"
    file_type: file
    recurse: false
  register: found
  tags: postgres_restore

- name: Abort when directory has no files
  fail:
    msg: "No files found in {{ pg_backup_directory }} to restore."
  when: found.matched | int == 0
  tags: postgres_restore

- name: Set newest file fact
  set_fact:
    newest_file: "{{ (found.files | sort(attribute='mtime') | last).path if found.files | length > 0 else None }}"
  tags: postgres_restore

- name: Abort when could not determine newest file
  fail:
    msg: "Could not determine newest file in {{ pg_backup_directory }} to restore."
  when: newest_file is none
  tags: postgres_restore

- name: Debug newest file
  debug:
    msg: "Newest backup file is {{ newest_file }}"
  when: newest_file is not none
  tags: postgres_restore

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: "0755"
  loop:
    - "{{ postgres_restore_base_path }}"
  tags: postgres_restore

- name: Copy gzip file to restore path
  copy:
    src: "{{ newest_file }}"
    dest: "{{ postgres_restore_base_path }}/backup_file.sql.gz"
    owner: 1000
    group: 1000
    mode: "0755"
    follow: true
    remote_src: true
  become: true
  tags: postgres_restore

- name: Template the DB restore script
  vars:
    local_pg_host: "{{ pg_host}}"
    local_pg_port: "{{ pg_port }}"
    local_pg_database: "{{ pg_database }}"
    local_pg_user: "{{ pg_user }}"
    local_pg_password: "{{ pg_password }}"
    local_pg_drop_before_restore: "{{ pg_drop_before_restore }}"
  template:
    src: templates/restore_postgres_db.sh.j2
    dest: "{{ postgres_restore_base_path }}/restore_postgres_db.sh"
    mode: '0755'
  tags: postgres_restore

- name: Postgres database restore
  docker_container:
    name: postgres_restore
    image: ubuntu:24.04
    hostname: postgres_restore
    volumes:
      - "{{ postgres_restore_base_path }}:/scripts:rw"
    command: ["/scripts/restore_postgres_db.sh"]
    labels:
      com.docker.compose.project: "postgres_restore_stack"
      com.docker.compose.service: "postgres_restore"
    networks:
      - name: traefik_proxy
    restart_policy: "no"
    recreate: true
    # auto_remove: true
    state: started
  register: restore_result
  tags: postgres_restore

- name: Show restore logs
  debug:
    var: restore_result.container.State

- name: Check container exit code
  command: docker inspect postgres_restore --format='{{'{{.State.ExitCode}}'}}'
  register: exit_code

- name: Fail if restore was not successful
  fail:
    msg: "Database restore failed with exit code {{ exit_code.stdout }}"
  when: exit_code.stdout != '0'

- name: Database Restored message
  debug:
    msg: "Database restored successfully"
  when: exit_code.stdout == '0'
  tags: postgres_restore


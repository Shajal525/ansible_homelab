- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes
  tags: docmost

- name: Check if networks exist
  command: docker network inspect {{ item }}
  register: network_check
  failed_when: network_check.rc != 0
  changed_when: false
  loop: 
    - traefik_proxy
    - pangolin_network

- name: Create Docmost directories
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: "0755"
  loop:
    - "{{ docmost_data }}"
    - "{{ docmost_db_backups }}"
    - "{{ docmost_db_backups_sripts }}"
    - "{{ docmost_db }}"
    - "{{ docmost_redis }}"
  tags: docmost


- name: Deploy PostgreSQL (db)
  docker_container: 
    name: docmost_db
    image: postgres:16-alpine
    hostname: docmost_db
    user: "1000:1000"
    env:
      POSTGRES_DB: "{{ docmost_db_name }}"
      POSTGRES_USER: "{{ docmost_db_user }}"
      POSTGRES_PASSWORD: "{{ docmost_db_password }}"
    volumes:
      - "{{ docmost_db }}:/var/lib/postgresql/data"
    labels:
      com.docker.compose.project: "docmost_stack"
      com.docker.compose.service: "docmost_db"
    networks:
      - name: traefik_proxy
    restart_policy: unless-stopped
    state: started
  tags: docmost

- name: Deploy Redis
  docker_container:
    name: docmost_redis
    image: "redis:7.2-alpine"
    hostname: docmost_redis
    user: "1000:1000"
    volumes:
      - "{{ docmost_redis }}:/data"
    labels:
      com.docker.compose.project: "docmost_stack"
      com.docker.compose.service: "docmost_redis"
    networks:
      - name: traefik_proxy
    restart_policy: unless-stopped
    state: started
  tags: docmost

- name: Deploy Docmost app
  docker_container:
    name: docmost
    image: "docmost/docmost:latest"
    hostname: docmost
    user: "1000:1000"
    env:
      APP_URL: "https://{{ docmost_domain }}"
      APP_SECRET: "{{ docmost_app_secret }}"
      DATABASE_URL: "postgresql://{{ docmost_db_user }}:{{ docmost_db_password }}@docmost_db:5432/{{ docmost_db_name }}?schema=public"
      REDIS_URL: "redis://docmost_redis:6379"
      PORT: "3000"
    ports:
      # - "{{ docmost_port }}:3000"
    volumes:
      - "{{ docmost_data }}:/app/data/storage"
    labels:
      com.docker.compose.project: "docmost_stack"
      com.docker.compose.service: "docmost"
      traefik.enable: "true"
      traefik.http.routers.docmost-secure.entrypoints: "https"
      traefik.http.routers.docmost-secure.rule: "Host(`{{ docmost_domain }}`)"
      traefik.http.routers.docmost-secure.tls: "true"
      traefik.docker.network: "traefik_proxy"
      # tsdproxy.enable: "true"
      # tsdproxy.name: "docmost"
      # tsdproxy.scheme: "https"
      # tsdproxy.tlsvalidate: "false"
      # tsdproxy.container_port: "5678"
    networks:
      - name: traefik_proxy
      - name: pangolin_network
    restart_policy: unless-stopped
    state: started
  tags: docmost

- name: Copy notification script
  template:
    src: ../../templates/matrix_notify.py.j2
    dest: "{{ docmost_db_backups_sripts }}/matrix_notify.py"
    mode: '0755'

- name: Template the DB backup initialization script
  vars:
    container_name: "docmost_db"
    db_backup_retain: "7"
    db_name: "{{ docmost_db_name }}"
    db_user: "{{ docmost_db_user }}"
    db_to_backup_password: "{{ docmost_db_password }}"
    backup_schedule: "0 2 * * *"
    notification_message: "Docmost DB backup"
  template:
    src: ../../templates//db_backup_entrypoint.sh.j2
    dest: "{{ docmost_db_backups_sripts }}/db_backup_entrypoint.sh"
    mode: '0755'

- name: Docmost database backup
  docker_container:
    name: docmost_pgbackups
    image: ubuntu:24.04
    hostname: docmost_pgbackups
    env:
      POSTGRES_USER: "{{ docmost_db_user }}"
      POSTGRES_PASSWORD: "{{ docmost_db_password }}"
    volumes:
      - "{{ docmost_db_backups }}:/backups:rw"
      - "{{ docmost_db_backups_sripts }}/db_backup_entrypoint.sh:/docker-entrypoint-initdb.d/init.sh:ro"
      - "{{ docmost_db_backups_sripts }}/matrix_notify.py:/notifier/matrix_notify.py:ro"
    command: ["/docker-entrypoint-initdb.d/init.sh"]
    labels:
      com.docker.compose.project: "docmost_stack"
      com.docker.compose.service: "docmost_pgbackups"
    networks:
      - name: traefik_proxy
    restart_policy: unless-stopped
    state: started
  tags: docmost

- name: Docmost deployed
  debug:
    msg: "Docmost is running successfully"
  tags: docmost
